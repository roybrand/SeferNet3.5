//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace SeferNet.Globals.SendMail {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MailHandlerSoap", Namespace="http://tempuri.org/")]
    public partial class MailHandler : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMailWithEmbeddedImageOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MailHandler() {
            this.Url = global::SeferNet.Globals.Properties.Settings.Default.Globals_SendMail_MailHandler;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendMailCompletedEventHandler SendMailCompleted;
        
        /// <remarks/>
        public event SendMailWithEmbeddedImageCompletedEventHandler SendMailWithEmbeddedImageCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMailWithHtmlBody", RequestElementName="SendMailWithHtmlBody", RequestNamespace="http://tempuri.org/", ResponseElementName="SendMailWithHtmlBodyResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendMail(string from, string to, string cc, string mailSubject, string mailBody, bool isBodyHtml, AttachedFile[] attachedFiles, string mailServerName) {
            this.Invoke("SendMail", new object[] {
                        from,
                        to,
                        cc,
                        mailSubject,
                        mailBody,
                        isBodyHtml,
                        attachedFiles,
                        mailServerName});
        }
        
        /// <remarks/>
        public void SendMailAsync(string from, string to, string cc, string mailSubject, string mailBody, bool isBodyHtml, AttachedFile[] attachedFiles, string mailServerName) {
            this.SendMailAsync(from, to, cc, mailSubject, mailBody, isBodyHtml, attachedFiles, mailServerName, null);
        }
        
        /// <remarks/>
        public void SendMailAsync(string from, string to, string cc, string mailSubject, string mailBody, bool isBodyHtml, AttachedFile[] attachedFiles, string mailServerName, object userState) {
            if ((this.SendMailOperationCompleted == null)) {
                this.SendMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMailOperationCompleted);
            }
            this.InvokeAsync("SendMail", new object[] {
                        from,
                        to,
                        cc,
                        mailSubject,
                        mailBody,
                        isBodyHtml,
                        attachedFiles,
                        mailServerName}, this.SendMailOperationCompleted, userState);
        }
        
        private void OnSendMailOperationCompleted(object arg) {
            if ((this.SendMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMailWithImages", RequestElementName="SendMailWithImages", RequestNamespace="http://tempuri.org/", ResponseElementName="SendMailWithImagesResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendMailWithEmbeddedImage(string from, string to, string cc, string mailSubject, string mailBody, EmbeddedImage[] images, bool isBodyHtml, AttachedFile[] attachedFiles, string mailServerName) {
            this.Invoke("SendMailWithEmbeddedImage", new object[] {
                        from,
                        to,
                        cc,
                        mailSubject,
                        mailBody,
                        images,
                        isBodyHtml,
                        attachedFiles,
                        mailServerName});
        }
        
        /// <remarks/>
        public void SendMailWithEmbeddedImageAsync(string from, string to, string cc, string mailSubject, string mailBody, EmbeddedImage[] images, bool isBodyHtml, AttachedFile[] attachedFiles, string mailServerName) {
            this.SendMailWithEmbeddedImageAsync(from, to, cc, mailSubject, mailBody, images, isBodyHtml, attachedFiles, mailServerName, null);
        }
        
        /// <remarks/>
        public void SendMailWithEmbeddedImageAsync(string from, string to, string cc, string mailSubject, string mailBody, EmbeddedImage[] images, bool isBodyHtml, AttachedFile[] attachedFiles, string mailServerName, object userState) {
            if ((this.SendMailWithEmbeddedImageOperationCompleted == null)) {
                this.SendMailWithEmbeddedImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMailWithEmbeddedImageOperationCompleted);
            }
            this.InvokeAsync("SendMailWithEmbeddedImage", new object[] {
                        from,
                        to,
                        cc,
                        mailSubject,
                        mailBody,
                        images,
                        isBodyHtml,
                        attachedFiles,
                        mailServerName}, this.SendMailWithEmbeddedImageOperationCompleted, userState);
        }
        
        private void OnSendMailWithEmbeddedImageOperationCompleted(object arg) {
            if ((this.SendMailWithEmbeddedImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMailWithEmbeddedImageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class AttachedFile {
        
        private byte[] contentStreamField;
        
        private string fileNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ContentStream {
            get {
                return this.contentStreamField;
            }
            set {
                this.contentStreamField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class EmbeddedImage {
        
        private string contentIDField;
        
        private byte[] fileStreamField;
        
        /// <remarks/>
        public string ContentID {
            get {
                return this.contentIDField;
            }
            set {
                this.contentIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FileStream {
            get {
                return this.fileStreamField;
            }
            set {
                this.fileStreamField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SendMailCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SendMailWithEmbeddedImageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591