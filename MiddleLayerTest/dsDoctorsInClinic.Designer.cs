//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MiddleLayerTest {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsDoctorsInClinic")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsDoctorsInClinic : global::System.Data.DataSet {
        
        private DeptDataTable tableDept;
        
        private DoctorDataTable tableDoctor;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.ExcludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsDoctorsInClinic() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsDoctorsInClinic(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Dept"] != null)) {
                    base.Tables.Add(new DeptDataTable(ds.Tables["Dept"]));
                }
                if ((ds.Tables["Doctor"] != null)) {
                    base.Tables.Add(new DoctorDataTable(ds.Tables["Doctor"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeptDataTable Dept {
            get {
                return this.tableDept;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DoctorDataTable Doctor {
            get {
                return this.tableDoctor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsDoctorsInClinic cln = ((dsDoctorsInClinic)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Dept"] != null)) {
                    base.Tables.Add(new DeptDataTable(ds.Tables["Dept"]));
                }
                if ((ds.Tables["Doctor"] != null)) {
                    base.Tables.Add(new DoctorDataTable(ds.Tables["Doctor"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDept = ((DeptDataTable)(base.Tables["Dept"]));
            if ((initTable == true)) {
                if ((this.tableDept != null)) {
                    this.tableDept.InitVars();
                }
            }
            this.tableDoctor = ((DoctorDataTable)(base.Tables["Doctor"]));
            if ((initTable == true)) {
                if ((this.tableDoctor != null)) {
                    this.tableDoctor.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsDoctorsInClinic";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsDoctorsInClinic.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.ExcludeSchema;
            this.tableDept = new DeptDataTable();
            base.Tables.Add(this.tableDept);
            this.tableDoctor = new DoctorDataTable();
            base.Tables.Add(this.tableDoctor);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDept() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDoctor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsDoctorsInClinic ds = new dsDoctorsInClinic();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DeptRowChangeEventHandler(object sender, DeptRowChangeEvent e);
        
        public delegate void DoctorRowChangeEventHandler(object sender, DoctorRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DeptDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columndeptCode;
            
            private global::System.Data.DataColumn columndeptName;
            
            private global::System.Data.DataColumn columnmanagerName;
            
            private global::System.Data.DataColumn columnsubAdministrationName;
            
            private global::System.Data.DataColumn columnphonePrePrefix1;
            
            private global::System.Data.DataColumn columnphonePrefix1;
            
            private global::System.Data.DataColumn columnphone1;
            
            private global::System.Data.DataColumn columnphonePrePrefix2;
            
            private global::System.Data.DataColumn columnphonePrefix2;
            
            private global::System.Data.DataColumn columnphone2;
            
            private global::System.Data.DataColumn columnfaxPrePrfeix;
            
            private global::System.Data.DataColumn columnfaxPrefix;
            
            private global::System.Data.DataColumn columnfax;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptDataTable() {
                this.TableName = "Dept";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeptDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DeptDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn deptCodeColumn {
                get {
                    return this.columndeptCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn deptNameColumn {
                get {
                    return this.columndeptName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn managerNameColumn {
                get {
                    return this.columnmanagerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn subAdministrationNameColumn {
                get {
                    return this.columnsubAdministrationName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn phonePrePrefix1Column {
                get {
                    return this.columnphonePrePrefix1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn phonePrefix1Column {
                get {
                    return this.columnphonePrefix1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn phone1Column {
                get {
                    return this.columnphone1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn phonePrePrefix2Column {
                get {
                    return this.columnphonePrePrefix2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn phonePrefix2Column {
                get {
                    return this.columnphonePrefix2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn phone2Column {
                get {
                    return this.columnphone2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn faxPrePrfeixColumn {
                get {
                    return this.columnfaxPrePrfeix;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn faxPrefixColumn {
                get {
                    return this.columnfaxPrefix;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn faxColumn {
                get {
                    return this.columnfax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptRow this[int index] {
                get {
                    return ((DeptRow)(this.Rows[index]));
                }
            }
            
            public event DeptRowChangeEventHandler DeptRowChanging;
            
            public event DeptRowChangeEventHandler DeptRowChanged;
            
            public event DeptRowChangeEventHandler DeptRowDeleting;
            
            public event DeptRowChangeEventHandler DeptRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDeptRow(DeptRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptRow AddDeptRow(int deptCode, string deptName, string managerName, string subAdministrationName, byte phonePrePrefix1, int phonePrefix1, int phone1, byte phonePrePrefix2, int phonePrefix2, int phone2, byte faxPrePrfeix, int faxPrefix, int fax) {
                DeptRow rowDeptRow = ((DeptRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        deptCode,
                        deptName,
                        managerName,
                        subAdministrationName,
                        phonePrePrefix1,
                        phonePrefix1,
                        phone1,
                        phonePrePrefix2,
                        phonePrefix2,
                        phone2,
                        faxPrePrfeix,
                        faxPrefix,
                        fax};
                rowDeptRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDeptRow);
                return rowDeptRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptRow FindBydeptCode(int deptCode) {
                return ((DeptRow)(this.Rows.Find(new object[] {
                            deptCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DeptDataTable cln = ((DeptDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DeptDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndeptCode = base.Columns["deptCode"];
                this.columndeptName = base.Columns["deptName"];
                this.columnmanagerName = base.Columns["managerName"];
                this.columnsubAdministrationName = base.Columns["subAdministrationName"];
                this.columnphonePrePrefix1 = base.Columns["phonePrePrefix1"];
                this.columnphonePrefix1 = base.Columns["phonePrefix1"];
                this.columnphone1 = base.Columns["phone1"];
                this.columnphonePrePrefix2 = base.Columns["phonePrePrefix2"];
                this.columnphonePrefix2 = base.Columns["phonePrefix2"];
                this.columnphone2 = base.Columns["phone2"];
                this.columnfaxPrePrfeix = base.Columns["faxPrePrfeix"];
                this.columnfaxPrefix = base.Columns["faxPrefix"];
                this.columnfax = base.Columns["fax"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndeptCode = new global::System.Data.DataColumn("deptCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndeptCode);
                this.columndeptName = new global::System.Data.DataColumn("deptName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndeptName);
                this.columnmanagerName = new global::System.Data.DataColumn("managerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmanagerName);
                this.columnsubAdministrationName = new global::System.Data.DataColumn("subAdministrationName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsubAdministrationName);
                this.columnphonePrePrefix1 = new global::System.Data.DataColumn("phonePrePrefix1", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnphonePrePrefix1);
                this.columnphonePrefix1 = new global::System.Data.DataColumn("phonePrefix1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnphonePrefix1);
                this.columnphone1 = new global::System.Data.DataColumn("phone1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnphone1);
                this.columnphonePrePrefix2 = new global::System.Data.DataColumn("phonePrePrefix2", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnphonePrePrefix2);
                this.columnphonePrefix2 = new global::System.Data.DataColumn("phonePrefix2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnphonePrefix2);
                this.columnphone2 = new global::System.Data.DataColumn("phone2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnphone2);
                this.columnfaxPrePrfeix = new global::System.Data.DataColumn("faxPrePrfeix", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfaxPrePrfeix);
                this.columnfaxPrefix = new global::System.Data.DataColumn("faxPrefix", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfaxPrefix);
                this.columnfax = new global::System.Data.DataColumn("fax", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfax);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndeptCode}, true));
                this.columndeptCode.AllowDBNull = false;
                this.columndeptCode.Unique = true;
                this.columndeptName.MaxLength = 50;
                this.columnmanagerName.MaxLength = 50;
                this.columnsubAdministrationName.MaxLength = 50;
                this.columnphonePrePrefix1.ReadOnly = true;
                this.columnphonePrefix1.ReadOnly = true;
                this.columnphone1.ReadOnly = true;
                this.columnphonePrePrefix2.ReadOnly = true;
                this.columnphonePrefix2.ReadOnly = true;
                this.columnphone2.ReadOnly = true;
                this.columnfaxPrePrfeix.ReadOnly = true;
                this.columnfaxPrefix.ReadOnly = true;
                this.columnfax.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptRow NewDeptRow() {
                return ((DeptRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DeptRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DeptRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DeptRowChanged != null)) {
                    this.DeptRowChanged(this, new DeptRowChangeEvent(((DeptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DeptRowChanging != null)) {
                    this.DeptRowChanging(this, new DeptRowChangeEvent(((DeptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DeptRowDeleted != null)) {
                    this.DeptRowDeleted(this, new DeptRowChangeEvent(((DeptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DeptRowDeleting != null)) {
                    this.DeptRowDeleting(this, new DeptRowChangeEvent(((DeptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDeptRow(DeptRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsDoctorsInClinic ds = new dsDoctorsInClinic();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DeptDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DoctorDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columndeptCode;
            
            private global::System.Data.DataColumn columnemployeeID;
            
            private global::System.Data.DataColumn columndegreeCode;
            
            private global::System.Data.DataColumn columnemployeeName;
            
            private global::System.Data.DataColumn columnprofessionCode;
            
            private global::System.Data.DataColumn columnprofessionDescription;
            
            private global::System.Data.DataColumn columnpositionCode;
            
            private global::System.Data.DataColumn columnpositionDescription;
            
            private global::System.Data.DataColumn columnHasAnotherWorkPlace;
            
            private global::System.Data.DataColumn columnprePrefix;
            
            private global::System.Data.DataColumn columnprefix;
            
            private global::System.Data.DataColumn columnphone;
            
            private global::System.Data.DataColumn columnReceptionDaysCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoctorDataTable() {
                this.TableName = "Doctor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DoctorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DoctorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn deptCodeColumn {
                get {
                    return this.columndeptCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn employeeIDColumn {
                get {
                    return this.columnemployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn degreeCodeColumn {
                get {
                    return this.columndegreeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn employeeNameColumn {
                get {
                    return this.columnemployeeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn professionCodeColumn {
                get {
                    return this.columnprofessionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn professionDescriptionColumn {
                get {
                    return this.columnprofessionDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn positionCodeColumn {
                get {
                    return this.columnpositionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn positionDescriptionColumn {
                get {
                    return this.columnpositionDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasAnotherWorkPlaceColumn {
                get {
                    return this.columnHasAnotherWorkPlace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn prePrefixColumn {
                get {
                    return this.columnprePrefix;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn prefixColumn {
                get {
                    return this.columnprefix;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn phoneColumn {
                get {
                    return this.columnphone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceptionDaysCountColumn {
                get {
                    return this.columnReceptionDaysCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoctorRow this[int index] {
                get {
                    return ((DoctorRow)(this.Rows[index]));
                }
            }
            
            public event DoctorRowChangeEventHandler DoctorRowChanging;
            
            public event DoctorRowChangeEventHandler DoctorRowChanged;
            
            public event DoctorRowChangeEventHandler DoctorRowDeleting;
            
            public event DoctorRowChangeEventHandler DoctorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDoctorRow(DoctorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoctorRow AddDoctorRow(int deptCode, int employeeID, int degreeCode, string employeeName, int professionCode, string professionDescription, int positionCode, string positionDescription, string HasAnotherWorkPlace, byte prePrefix, int prefix, int phone, int ReceptionDaysCount) {
                DoctorRow rowDoctorRow = ((DoctorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        deptCode,
                        employeeID,
                        degreeCode,
                        employeeName,
                        professionCode,
                        professionDescription,
                        positionCode,
                        positionDescription,
                        HasAnotherWorkPlace,
                        prePrefix,
                        prefix,
                        phone,
                        ReceptionDaysCount};
                rowDoctorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDoctorRow);
                return rowDoctorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoctorRow FindBydeptCodeemployeeIDprofessionCodepositionCode(int deptCode, int employeeID, int professionCode, int positionCode) {
                return ((DoctorRow)(this.Rows.Find(new object[] {
                            deptCode,
                            employeeID,
                            professionCode,
                            positionCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DoctorDataTable cln = ((DoctorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DoctorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndeptCode = base.Columns["deptCode"];
                this.columnemployeeID = base.Columns["employeeID"];
                this.columndegreeCode = base.Columns["degreeCode"];
                this.columnemployeeName = base.Columns["employeeName"];
                this.columnprofessionCode = base.Columns["professionCode"];
                this.columnprofessionDescription = base.Columns["professionDescription"];
                this.columnpositionCode = base.Columns["positionCode"];
                this.columnpositionDescription = base.Columns["positionDescription"];
                this.columnHasAnotherWorkPlace = base.Columns["HasAnotherWorkPlace"];
                this.columnprePrefix = base.Columns["prePrefix"];
                this.columnprefix = base.Columns["prefix"];
                this.columnphone = base.Columns["phone"];
                this.columnReceptionDaysCount = base.Columns["ReceptionDaysCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndeptCode = new global::System.Data.DataColumn("deptCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndeptCode);
                this.columnemployeeID = new global::System.Data.DataColumn("employeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnemployeeID);
                this.columndegreeCode = new global::System.Data.DataColumn("degreeCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndegreeCode);
                this.columnemployeeName = new global::System.Data.DataColumn("employeeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnemployeeName);
                this.columnprofessionCode = new global::System.Data.DataColumn("professionCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprofessionCode);
                this.columnprofessionDescription = new global::System.Data.DataColumn("professionDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprofessionDescription);
                this.columnpositionCode = new global::System.Data.DataColumn("positionCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpositionCode);
                this.columnpositionDescription = new global::System.Data.DataColumn("positionDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpositionDescription);
                this.columnHasAnotherWorkPlace = new global::System.Data.DataColumn("HasAnotherWorkPlace", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasAnotherWorkPlace);
                this.columnprePrefix = new global::System.Data.DataColumn("prePrefix", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprePrefix);
                this.columnprefix = new global::System.Data.DataColumn("prefix", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprefix);
                this.columnphone = new global::System.Data.DataColumn("phone", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnphone);
                this.columnReceptionDaysCount = new global::System.Data.DataColumn("ReceptionDaysCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceptionDaysCount);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndeptCode,
                                this.columnemployeeID,
                                this.columnprofessionCode,
                                this.columnpositionCode}, true));
                this.columndeptCode.AllowDBNull = false;
                this.columnemployeeID.AllowDBNull = false;
                this.columndegreeCode.AllowDBNull = false;
                this.columnemployeeName.ReadOnly = true;
                this.columnemployeeName.MaxLength = 152;
                this.columnprofessionCode.AllowDBNull = false;
                this.columnprofessionDescription.MaxLength = 100;
                this.columnpositionCode.AllowDBNull = false;
                this.columnpositionDescription.AllowDBNull = false;
                this.columnpositionDescription.MaxLength = 50;
                this.columnHasAnotherWorkPlace.ReadOnly = true;
                this.columnHasAnotherWorkPlace.MaxLength = 2;
                this.columnReceptionDaysCount.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoctorRow NewDoctorRow() {
                return ((DoctorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DoctorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DoctorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DoctorRowChanged != null)) {
                    this.DoctorRowChanged(this, new DoctorRowChangeEvent(((DoctorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DoctorRowChanging != null)) {
                    this.DoctorRowChanging(this, new DoctorRowChangeEvent(((DoctorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DoctorRowDeleted != null)) {
                    this.DoctorRowDeleted(this, new DoctorRowChangeEvent(((DoctorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DoctorRowDeleting != null)) {
                    this.DoctorRowDeleting(this, new DoctorRowChangeEvent(((DoctorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDoctorRow(DoctorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsDoctorsInClinic ds = new dsDoctorsInClinic();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DoctorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DeptRow : global::System.Data.DataRow {
            
            private DeptDataTable tableDept;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeptRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDept = ((DeptDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int deptCode {
                get {
                    return ((int)(this[this.tableDept.deptCodeColumn]));
                }
                set {
                    this[this.tableDept.deptCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string deptName {
                get {
                    try {
                        return ((string)(this[this.tableDept.deptNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'deptName\' in table \'Dept\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDept.deptNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string managerName {
                get {
                    try {
                        return ((string)(this[this.tableDept.managerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'managerName\' in table \'Dept\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDept.managerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string subAdministrationName {
                get {
                    try {
                        return ((string)(this[this.tableDept.subAdministrationNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'subAdministrationName\' in table \'Dept\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDept.subAdministrationNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte phonePrePrefix1 {
                get {
                    try {
                        return ((byte)(this[this.tableDept.phonePrePrefix1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'phonePrePrefix1\' in table \'Dept\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDept.phonePrePrefix1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int phonePrefix1 {
                get {
                    try {
                        return ((int)(this[this.tableDept.phonePrefix1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'phonePrefix1\' in table \'Dept\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDept.phonePrefix1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int phone1 {
                get {
                    try {
                        return ((int)(this[this.tableDept.phone1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'phone1\' in table \'Dept\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDept.phone1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte phonePrePrefix2 {
                get {
                    try {
                        return ((byte)(this[this.tableDept.phonePrePrefix2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'phonePrePrefix2\' in table \'Dept\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDept.phonePrePrefix2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int phonePrefix2 {
                get {
                    try {
                        return ((int)(this[this.tableDept.phonePrefix2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'phonePrefix2\' in table \'Dept\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDept.phonePrefix2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int phone2 {
                get {
                    try {
                        return ((int)(this[this.tableDept.phone2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'phone2\' in table \'Dept\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDept.phone2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte faxPrePrfeix {
                get {
                    try {
                        return ((byte)(this[this.tableDept.faxPrePrfeixColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'faxPrePrfeix\' in table \'Dept\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDept.faxPrePrfeixColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int faxPrefix {
                get {
                    try {
                        return ((int)(this[this.tableDept.faxPrefixColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'faxPrefix\' in table \'Dept\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDept.faxPrefixColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fax {
                get {
                    try {
                        return ((int)(this[this.tableDept.faxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fax\' in table \'Dept\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDept.faxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdeptNameNull() {
                return this.IsNull(this.tableDept.deptNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdeptNameNull() {
                this[this.tableDept.deptNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmanagerNameNull() {
                return this.IsNull(this.tableDept.managerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmanagerNameNull() {
                this[this.tableDept.managerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssubAdministrationNameNull() {
                return this.IsNull(this.tableDept.subAdministrationNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsubAdministrationNameNull() {
                this[this.tableDept.subAdministrationNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsphonePrePrefix1Null() {
                return this.IsNull(this.tableDept.phonePrePrefix1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetphonePrePrefix1Null() {
                this[this.tableDept.phonePrePrefix1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsphonePrefix1Null() {
                return this.IsNull(this.tableDept.phonePrefix1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetphonePrefix1Null() {
                this[this.tableDept.phonePrefix1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isphone1Null() {
                return this.IsNull(this.tableDept.phone1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setphone1Null() {
                this[this.tableDept.phone1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsphonePrePrefix2Null() {
                return this.IsNull(this.tableDept.phonePrePrefix2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetphonePrePrefix2Null() {
                this[this.tableDept.phonePrePrefix2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsphonePrefix2Null() {
                return this.IsNull(this.tableDept.phonePrefix2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetphonePrefix2Null() {
                this[this.tableDept.phonePrefix2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isphone2Null() {
                return this.IsNull(this.tableDept.phone2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setphone2Null() {
                this[this.tableDept.phone2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfaxPrePrfeixNull() {
                return this.IsNull(this.tableDept.faxPrePrfeixColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfaxPrePrfeixNull() {
                this[this.tableDept.faxPrePrfeixColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfaxPrefixNull() {
                return this.IsNull(this.tableDept.faxPrefixColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfaxPrefixNull() {
                this[this.tableDept.faxPrefixColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfaxNull() {
                return this.IsNull(this.tableDept.faxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfaxNull() {
                this[this.tableDept.faxColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DoctorRow : global::System.Data.DataRow {
            
            private DoctorDataTable tableDoctor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DoctorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDoctor = ((DoctorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int deptCode {
                get {
                    return ((int)(this[this.tableDoctor.deptCodeColumn]));
                }
                set {
                    this[this.tableDoctor.deptCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int employeeID {
                get {
                    return ((int)(this[this.tableDoctor.employeeIDColumn]));
                }
                set {
                    this[this.tableDoctor.employeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int degreeCode {
                get {
                    return ((int)(this[this.tableDoctor.degreeCodeColumn]));
                }
                set {
                    this[this.tableDoctor.degreeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string employeeName {
                get {
                    try {
                        return ((string)(this[this.tableDoctor.employeeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'employeeName\' in table \'Doctor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDoctor.employeeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int professionCode {
                get {
                    return ((int)(this[this.tableDoctor.professionCodeColumn]));
                }
                set {
                    this[this.tableDoctor.professionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string professionDescription {
                get {
                    try {
                        return ((string)(this[this.tableDoctor.professionDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'professionDescription\' in table \'Doctor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDoctor.professionDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int positionCode {
                get {
                    return ((int)(this[this.tableDoctor.positionCodeColumn]));
                }
                set {
                    this[this.tableDoctor.positionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string positionDescription {
                get {
                    return ((string)(this[this.tableDoctor.positionDescriptionColumn]));
                }
                set {
                    this[this.tableDoctor.positionDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HasAnotherWorkPlace {
                get {
                    if (this.IsHasAnotherWorkPlaceNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableDoctor.HasAnotherWorkPlaceColumn]));
                    }
                }
                set {
                    this[this.tableDoctor.HasAnotherWorkPlaceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte prePrefix {
                get {
                    try {
                        return ((byte)(this[this.tableDoctor.prePrefixColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'prePrefix\' in table \'Doctor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDoctor.prePrefixColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int prefix {
                get {
                    try {
                        return ((int)(this[this.tableDoctor.prefixColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'prefix\' in table \'Doctor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDoctor.prefixColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int phone {
                get {
                    try {
                        return ((int)(this[this.tableDoctor.phoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'phone\' in table \'Doctor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDoctor.phoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReceptionDaysCount {
                get {
                    try {
                        return ((int)(this[this.tableDoctor.ReceptionDaysCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceptionDaysCount\' in table \'Doctor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDoctor.ReceptionDaysCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsemployeeNameNull() {
                return this.IsNull(this.tableDoctor.employeeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetemployeeNameNull() {
                this[this.tableDoctor.employeeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprofessionDescriptionNull() {
                return this.IsNull(this.tableDoctor.professionDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprofessionDescriptionNull() {
                this[this.tableDoctor.professionDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasAnotherWorkPlaceNull() {
                return this.IsNull(this.tableDoctor.HasAnotherWorkPlaceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasAnotherWorkPlaceNull() {
                this[this.tableDoctor.HasAnotherWorkPlaceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprePrefixNull() {
                return this.IsNull(this.tableDoctor.prePrefixColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprePrefixNull() {
                this[this.tableDoctor.prePrefixColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprefixNull() {
                return this.IsNull(this.tableDoctor.prefixColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprefixNull() {
                this[this.tableDoctor.prefixColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsphoneNull() {
                return this.IsNull(this.tableDoctor.phoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetphoneNull() {
                this[this.tableDoctor.phoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceptionDaysCountNull() {
                return this.IsNull(this.tableDoctor.ReceptionDaysCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceptionDaysCountNull() {
                this[this.tableDoctor.ReceptionDaysCountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DeptRowChangeEvent : global::System.EventArgs {
            
            private DeptRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptRowChangeEvent(DeptRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DoctorRowChangeEvent : global::System.EventArgs {
            
            private DoctorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoctorRowChangeEvent(DoctorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoctorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace MiddleLayerTest.dsDoctorsInClinicTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DeptTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DeptTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Dept";
            tableMapping.ColumnMappings.Add("deptCode", "deptCode");
            tableMapping.ColumnMappings.Add("deptName", "deptName");
            tableMapping.ColumnMappings.Add("managerName", "managerName");
            tableMapping.ColumnMappings.Add("subAdministrationName", "subAdministrationName");
            tableMapping.ColumnMappings.Add("phonePrePrefix1", "phonePrePrefix1");
            tableMapping.ColumnMappings.Add("phonePrefix1", "phonePrefix1");
            tableMapping.ColumnMappings.Add("phone1", "phone1");
            tableMapping.ColumnMappings.Add("phonePrePrefix2", "phonePrePrefix2");
            tableMapping.ColumnMappings.Add("phonePrefix2", "phonePrefix2");
            tableMapping.ColumnMappings.Add("phone2", "phone2");
            tableMapping.ColumnMappings.Add("faxPrePrfeix", "faxPrePrfeix");
            tableMapping.ColumnMappings.Add("faxPrefix", "faxPrefix");
            tableMapping.ColumnMappings.Add("fax", "fax");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MiddleLayerTest.Properties.Settings.Default.SeferNetConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.ws_rpc_Dept";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DeptCode", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsDoctorsInClinic.DeptDataTable dataTable, global::System.Nullable<int> DeptCode) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((DeptCode.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(DeptCode.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsDoctorsInClinic.DeptDataTable GetData(global::System.Nullable<int> DeptCode) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((DeptCode.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(DeptCode.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            dsDoctorsInClinic.DeptDataTable dataTable = new dsDoctorsInClinic.DeptDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DoctorTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DoctorTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Doctor";
            tableMapping.ColumnMappings.Add("deptCode", "deptCode");
            tableMapping.ColumnMappings.Add("employeeID", "employeeID");
            tableMapping.ColumnMappings.Add("degreeCode", "degreeCode");
            tableMapping.ColumnMappings.Add("employeeName", "employeeName");
            tableMapping.ColumnMappings.Add("professionCode", "professionCode");
            tableMapping.ColumnMappings.Add("professionDescription", "professionDescription");
            tableMapping.ColumnMappings.Add("positionCode", "positionCode");
            tableMapping.ColumnMappings.Add("positionDescription", "positionDescription");
            tableMapping.ColumnMappings.Add("HasAnotherWorkPlace", "HasAnotherWorkPlace");
            tableMapping.ColumnMappings.Add("prePrefix", "prePrefix");
            tableMapping.ColumnMappings.Add("prefix", "prefix");
            tableMapping.ColumnMappings.Add("phone", "phone");
            tableMapping.ColumnMappings.Add("ReceptionDaysCount", "ReceptionDaysCount");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MiddleLayerTest.Properties.Settings.Default.SeferNetConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.ws_rpc_DoctorsList";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DeptCode", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsDoctorsInClinic.DoctorDataTable dataTable, global::System.Nullable<int> DeptCode) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((DeptCode.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(DeptCode.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsDoctorsInClinic.DoctorDataTable GetData(global::System.Nullable<int> DeptCode) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((DeptCode.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(DeptCode.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            dsDoctorsInClinic.DoctorDataTable dataTable = new dsDoctorsInClinic.DoctorDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591