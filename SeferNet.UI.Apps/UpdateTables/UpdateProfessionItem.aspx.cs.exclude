using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.IO;
using System.Configuration;
using System.Web.Services;
using SeferNet.BusinessLayer.ObjectDataSource;
using SeferNet.BusinessLayer.BusinessObject;
using SeferNet.BusinessLayer.WorkFlow;
using SeferNet.FacadeLayer;
using SeferNet.Globals;

public partial class UpdateTables_UpdateProfessionItem : System.Web.UI.Page
{
    private _ManagingServicesProfessionsHelper helper = new _ManagingServicesProfessionsHelper();
    private ManageConversationsBO mng = new ManageConversationsBO();

    string _originalCategory = String.Empty;
    string _relation = String.Empty;
    string _parentCode = String.Empty;


    public delegate void DeleteRelationsEventHandler(object sender, EventArgs e);
    public event DeleteRelationsEventHandler deleteRelations;


    public delegate void ChangeCategoryEventHandler(object sender, EventArgs e);
    public event ChangeCategoryEventHandler changeCategory;


    protected void form_PreRender(object sender, EventArgs e)
    {
        int itemOldCode = -1;
        string itemDesc = String.Empty;
        string selectedTable = String.Empty;
        string category = String.Empty;
        string parentName = String.Empty;
        string parentCode = String.Empty;
        try
        {
            GetRequiredCodeDetails(ref itemOldCode, ref itemDesc, ref selectedTable, ref category, ref parentCode, ref parentName);

            if (!String.IsNullOrEmpty(itemDesc) && itemOldCode != -1)
            {
                rfv_txtNewDesc.IsValid = true;

                if (Session["item"] != null && Session["item"].ToString() != String.Empty)
                {
                    string item = Session["item"].ToString();

                    switch (item)
                    {
                        case "tableCode":
                            txtTblCode.Text = itemOldCode.ToString();
                            txtTblDesc.Text = itemDesc;
                            txtProficiencyFemale.Text = itemDesc;
                            txtProficiencyMale.Text = itemDesc;

                            if (category != String.Empty)
                                SelectRetrainingCategory(category);

                            if (parentCode != String.Empty)
                                txtParentCode.Text = parentCode;

                            if (parentName != String.Empty)
                                txtParentDesc.Text = parentName;

                            btnParentDelete.Enabled = true;
                            btnParentCode.Enabled = true;
                            lblParentCode.Enabled = true;
                            lblParentDesc.Enabled = true;

                            break;                 
                        case "parentCode":
                            txtParentCode.Text = itemOldCode.ToString();
                            txtParentDesc.Text = itemDesc;

                            break;
                    }

                    //if (txtParentCode.Text != String.Empty && txtParentDesc.Text != String.Empty)
                    //{
                    //    //warning for user that he will change category of item - parent code will be deleted
                    //    string var = GetLocalResourceObject("CategoryWasChanged").ToString();
                    //    var = " warning('" + var + "');";

                    //    this.ddlRetrainingCategory.Attributes.Add("onchange", var);
                    //}

                    if (selectedTable != String.Empty)
                        ddlTableCode.SelectedValue = selectedTable;
                    Session["selectedCode"] = null;
                    Session["item"] = null;
                }
            }

            if (chk601_606.Checked)
            {
                txtNewDesc.Text = txtTblDesc.Text;
            }

            if (ddlRetrainingCategory.SelectedItem.Text == GetLocalResourceObject("Profession").ToString() )
            {
                SetProfessionDefault();
            }
            else
                pnlProficiency.Visible = false;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }


    protected void Page_Load(object sender, EventArgs e)
    {
        string var = "";
        deleteRelations = btnRelations_Click;

        if (!Page.IsPostBack)
        {
            if (PreviousPage != null)
            {
                BindDDlCategory(ddlRetrainingCategory);
                BindData();
            }

            if (GetViewState("relation") == "child")
            {
                string message = String.Format(GetLocalResourceObject("DeleteParentChild").ToString(), GetViewState("category"));
                btnRelations.Attributes["onclick"] = "return confirm('" + message + "')";

                if (GetViewState("parentCode") != String.Empty)
                {
                    btnRelations.Visible = true;


                    if (ddlRetrainingCategory.SelectedItem.Text == GetLocalResourceObject("Profession").ToString())
                    {
                        var = String.Format(GetLocalResourceObject("Do yout delete relation to parent").ToString(), GetLocalResourceObject("Profession").ToString(), GetLocalResourceObject("Professions").ToString());
                    }
                    else if (ddlRetrainingCategory.SelectedItem.Text == GetLocalResourceObject("Service").ToString())
                    {
                        var = String.Format(GetLocalResourceObject("Do yout delete relation to parent").ToString(), GetLocalResourceObject("Service").ToString(), GetLocalResourceObject("Services").ToString());
                    }
                }
                var = "ChangeCategory('" + var + "');";

                this.ddlRetrainingCategory.Attributes.Add("onchange", var);
            }
            else if (GetViewState("relation") == "parent")
            {
                btnParentCode.Enabled = false;
                btnParentDelete.Enabled = false;

                lblParentDesc.Enabled = false;
                lblParentCode.Enabled = false;

                btnRelations.Visible = false;
                txtParentCode.ReadOnly = true;
                txtParentDesc.ReadOnly = true;

                if (ddlRetrainingCategory.SelectedItem.Text == GetLocalResourceObject("Profession").ToString())
                {
                    var = String.Format(GetLocalResourceObject("You cann't delete this item - this is parent item").ToString(), GetLocalResourceObject("Profession").ToString(), GetLocalResourceObject("Professions").ToString());
                }
                else if (ddlRetrainingCategory.SelectedItem.Text == GetLocalResourceObject("Service").ToString())
                {
                    var = String.Format(GetLocalResourceObject("You cann't delete this item - this is parent item").ToString(), GetLocalResourceObject("Service").ToString(), GetLocalResourceObject("Services").ToString());
                }

                var = " alert ('" + var + "'); changeDdlCategory('" + GetViewState("category") + "');";

                this.ddlRetrainingCategory.Attributes.Add("onchange", var);
                ddlRetrainingCategory.SelectedIndexChanged -= ddlRetrainingCategory_SelectedIndexChanged;
                ddlRetrainingCategory.AutoPostBack = false;

                //if no category - this is old item 
                if (GetViewState("category") == null && GetViewState("oldCategory") == GetLocalResourceObject("Profession").ToString())
                    ddlRetrainingCategory.SelectedValue = "2";
                else if (GetViewState("category") == null)
                    ddlRetrainingCategory.SelectedValue = "1";
            }
            else if (GetViewState("relation") == String.Empty)
            {
                ddlRetrainingCategory.SelectedItem.Text = GetViewState("category").ToString();
            }
        }
        else
        {

            if (hdnChoice.Value == "1")
            {
                deleteRelations(btnRelations, null);
            }
        }
    }



    #region Get details

    private void GetRowData(ref string code, ref string sectorCode,
       ref string name, string category, ref string parentCode, ref string parentDesc, ref string tbl601_606,
        ref string showExpert, ref string relation, GridViewRow row)
    {
        try
        {          
            if (row.Cells[4].Text.Trim() != string.Empty)
            {
                code = row.Cells[4].Text;
                ManageItemsBO mng = new ManageItemsBO();
                DataTable dt = mng.GetTreeViewItemDetails(int.Parse(row.Cells[4].Text), category);
                if (dt != null && dt.Rows.Count > 0)
                {
                    sectorCode = dt.Rows[0]["Sector"].ToString();
                    name = dt.Rows[0]["NameR"].ToString();
                    parentCode = dt.Rows[0]["ParentCode"].ToString();
                    parentDesc = dt.Rows[0]["ParentCodeName"].ToString();
                    tbl601_606 = dt.Rows[0]["tableName"].ToString();
                    showExpert = dt.Rows[0]["ShowExpert"].ToString();
                    relation = dt.Rows[0]["Relation"].ToString();                    
                }
            }                           
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }




    private string GetViewState(string field)
    {
        if (ViewState[field] != null)
            return ViewState[field].ToString();
        else
            return String.Empty;
    }


    private string GetOriginalCategory(string category, GridViewRow row)
    {
        category = (row.FindControl("lblCategory") as Label).Text;

        ViewState["category"] = category;
        return category;
    }



    private void GetRequiredCodeDetails(ref int itemOldCode, ref string itemDesc, ref string selectedTable, ref string category, ref string parentCode, ref string parentName)
    {
        if (Session["selectedCode"] != null)
        {
            Hashtable hTbl = Session["selectedCode"] as Hashtable;
            if (hTbl != null && hTbl.Count > 0)
            {
                itemOldCode = int.Parse(hTbl["itemCode"].ToString());
                itemDesc = hTbl["itemDesc"].ToString();

                if (hTbl.Count > 2)
                {
                    selectedTable = hTbl["table"].ToString();
                }
                if (hTbl.Count > 3)
                {
                    if (hTbl["category"] != null)
                        category = hTbl["category"].ToString();

                    if (hTbl["parentName"] != null)
                        parentName = hTbl["parentName"].ToString();

                    if (hTbl["parentCode"] != null)
                        parentCode = hTbl["parentCode"].ToString();
                }
            }
        }
    }

    #endregion

    private void FillDDLTables()
    {
        string path = Path.Combine(this.Request.PhysicalApplicationPath, @"Xml\ManagingServicesProfessions.xml");

        DataTable dt = helper.GetListTables(path);
        ddlTableCode.DataSource = dt;
        ddlTableCode.DataTextField = dt.Columns[1].ToString();
        ddlTableCode.DataValueField = dt.Columns[0].ToString();
        ddlTableCode.DataBind();
    }

    protected void txtTblCode_PreRender(object sender, EventArgs e)
    {
        try
        {
            if (txtTblCode.Text != string.Empty)
            {
                txtRetrainingCode.Text = txtTblCode.Text;
                if (GetViewState("relation") != "parent")
                {
                    btnParentCode.Enabled = true;
                    txtParentCode.Enabled = true;
                    txtParentDesc.Enabled = true;
                    lblParentCode.Enabled = true;
                    lblParentDesc.Enabled = true;
                }
            }
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    #region DB Changes
    private void UpdateItem(string code, string name, string category, string parentCode,
                                string oldCode, string oldCodeNew, string oldTable, string oldTableNew,
                                string sectorCode, string showExpert)
    {
        string query = String.Empty;

        bool flag = false;
        try
        {

            if (category == GetLocalResourceObject("Service").ToString())
            {
                mng.UpdateRelevantService(int.Parse(code), name, int.Parse(parentCode),
                    int.Parse("-1"), int.Parse("-1"), oldTable, String.Empty, flag, new UserManager().GetLoggedinUserNameWithPrefix());

            }
            else if (category == GetLocalResourceObject("Profession").ToString())
            {
                Facade.getFacadeObject().UpdateRelevantProfession(int.Parse(code), name,
                                int.Parse(parentCode), int.Parse("-1"), int.Parse("-1"), oldTable, String.Empty,
                                sectorCode , showExpert, flag);
                // move to facade!!!! TODO
                //mng.UpdateRelevantProfession(int.Parse(code), name,
                //    int.Parse(parentCode), int.Parse("-1"),
                //   int.Parse("-1"), oldTable, String.Empty ,
                //   sectorCode, showExpert, flag, new UserManager().GetLoggedinUserNameWithPrefix());

            }
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    #endregion

    #region BindData

    private void BindData()
    {
        string category = String.Empty;
        string sectorCode = String.Empty;       
        string name = String.Empty;
        string parentCode = String.Empty;
        string parentDesc = String.Empty;       
        string code = String.Empty;        
        string tbl601_606 = String.Empty;
        string showExpert = String.Empty;
        string relation = String.Empty;

        GridViewRow row = null;

        try
        {
            UserControls_GridTreeView gridTreeView = (UserControls_GridTreeView)PreviousPage.GridTreeView;
            if (gridTreeView != null)
            {
                object obj = Page.Request["flag"];
                row = gridTreeView.EditedRow;
                if (gridTreeView.Item.ToString() == "professions")
                {
                    category = GetLocalResourceObject("Profession").ToString();                    
                }
                else if (gridTreeView.Item.ToString() == "services")
                {
                    category = GetLocalResourceObject("Service").ToString();
                }

                if (row != null)
                {
                     GetRowData(ref code, ref sectorCode,  ref name,  category,
                            ref parentCode, ref parentDesc, ref  tbl601_606, ref showExpert, ref relation, row);
                }
            }

            if (code != String.Empty)
            {
                ViewState["code"] = code;
            }

            if (category != String.Empty)
            {
                ViewState["category"] = category;
            }

            if (parentCode != string.Empty)
                ViewState["parentCode"] = parentCode;

            ViewState["relation"] = relation;

            if (category == GetLocalResourceObject("Service").ToString())
            {
                ddlRetrainingCategory.SelectedValue = "1";
            }
            else if (category == GetLocalResourceObject("Profession").ToString())
            {
                ddlRetrainingCategory.SelectedValue = "2";
            }

            //BindOldCategory(oldCode, oldDesc, oldCategory, ref category);

            //remember originalCategory 
            //ViewState["originalCategory"] = category;

            BindTbl601_606(tbl601_606, code, name);

            BindChanging(code, category, name, parentCode, parentDesc, sectorCode);

            //if code of tables 601/606 exists and oldCode exist 
            if (!string.IsNullOrEmpty(code) )//&& !string.IsNullOrEmpty(oldCode))
            {
                pnlTablesDetails.Enabled = false;
            }
            //if code of tables 601/606 doesn't exists and oldCode exist 
            else if (string.IsNullOrEmpty(code)) //&& !string.IsNullOrEmpty(oldCode))
            {
                //pnlOldCodes.Enabled = false;
                //ddlRetrainingCategory.Enabled = false;
                btnParentCode.Enabled = false;
                txtParentCode.Enabled = false;
                btnParentDelete.Enabled = false;
                txtParentDesc.Enabled = false;
                lblParentDesc.Enabled = false;
                lblParentCode.Enabled = false;
            }
            //if code of tables 601/606 't exists and oldCode doesn exist 
            else if (!string.IsNullOrEmpty(code)) //&& string.IsNullOrEmpty(oldCode))
            {
                pnlTablesDetails.Enabled = false;
            }
            BindSpecialist(category, showExpert, sectorCode);

            if (relation == String.Empty)
                btnRelations.Visible = false;

        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private void BindSpecialist(string category, string showExpert ,string  sectorCode)
    {
        try
        {
            if (category == helper.GetResources(@"~/Admin/ManagingServicesProfessions.aspx", "Profession") && 
                (sectorCode == "1" || sectorCode == "7"))
            {
                string path = Path.Combine(this.Request.PhysicalApplicationPath, @"Xml\ManagingServicesProfessions.xml");
                string templateFemail = helper.GetNode(path, "/Administration/Specialists/Female");
                string templateMail = helper.GetNode(path, "/Administration/Specialists/Male");
                if (templateFemail != String.Empty)
                {
                    lblProficiencyFemale.Text = templateFemail;
                }
                if (templateMail != String.Empty)
                {
                    lblProficiencyMale.Text = templateMail;
                }
                if (showExpert == String.Empty)
                    showExpert = " ";
                txtProficiencyMale.Text = showExpert;
                txtProficiencyFemale.Text = showExpert;
            }
            else
                pnlProficiency.Visible = false;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }


    private void BindSector(string sectorCode)
    {
        Facade facade = Facade.getFacadeObject();

        DataSet ds = facade.GetRelevantForProfessionsSectors();

        if (ds != null && ds.Tables[0].Rows.Count > 0)
        {
            ddlSectors.BindData(ds.Tables[0], "EmployeeSectorCode", "EmployeeSectorDescription");
        }

        ddlSectors.SelectItems(sectorCode);                
    }

    private void BindChanging(string code, string category, 
                                string name, string parentCode, string parentDesc, string sectorCode)
    {
        try
        {
            txtRetrainingCode.Text = code;
            BindDDlCategory(ddlRetrainingCategory);
            SelectRetrainingCategory(category);

            txtNewDesc.Text = name;
            txtParentCode.Text = parentCode;
            txtParentDesc.Text = parentDesc;

            BindSector(sectorCode);
            if (category != helper.GetResources(@"~/Admin/ManagingServicesProfessions.aspx", "Profession") || sectorCode != "1")
            {
                //ddlSector.Visible = false;
                lblSector.Visible = false;
            }
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private void SelectRetrainingCategory(string category)
    {
        if (category == helper.GetResources(@"~/Admin/ManagingServicesProfessions.aspx", "Service"))
        {
            ddlRetrainingCategory.SelectedValue = "1";
        }
        else if (category == helper.GetResources(@"~/Admin/ManagingServicesProfessions.aspx", "Profession"))
        {
            ddlRetrainingCategory.SelectedValue = "2";
        }
    }

    private void BindTbl601_606(string tbl601_606, string code, string tblName)
    {
        try
        {
            FillDDLTables();
            if (tbl601_606 == "MF_Zimun601")
            {
                ddlTableCode.SelectedIndex = 1;
            }
            else if (tbl601_606 == "MF_TatHitmahutZimun606")
            {
                ddlTableCode.SelectedIndex = 2;
            }
            else
            {
                //btnTblSearch.Attributes["onclick"] = "javascript:window.open('ListOldOperations.aspx?tableCode=5')";
            }

            txtTblCode.Text = code;
            txtTblDesc.Text = tblName;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    //private void BindOldCategory(string oldCode, string oldDesc, string oldCategory, ref string category)
    //{
    //    try
    //    {
    //        BindDDlCategory(ddlCategory);

    //        if (oldCategory != String.Empty)
    //        {
    //            if (oldCategory == GetLocalResourceObject("Service").ToString())
    //            {
    //                ddlCategory.SelectedValue = "1";

    //            }
    //            else if (oldCategory == GetLocalResourceObject("Profession").ToString())
    //            {
    //                ddlCategory.SelectedValue = "2";
    //            }
    //        }
    //        else if (oldCategory == helper.GetResources(@"~/Admin/ManagingServicesProfessions.aspx", "NotDefined") || oldCategory == String.Empty)
    //        {
    //            if (category == GetLocalResourceObject("Service").ToString())
    //                ddlCategory.SelectedValue = "1";
    //            else
    //                ddlCategory.SelectedValue = "2";
    //        }

    //        txtOldCode.Text = oldCode;
    //        txtOldDesc.Text = oldDesc;

    //    }
    //    catch (Exception ex)
    //    {
    //        throw new Exception(ex.Message);
    //    }
    //}

    private void BindDDlCategory(DropDownList ddl)
    {
        ListItem item = null;
        string servise = GetLocalResourceObject("Service").ToString();
        string profession = GetLocalResourceObject("Profession").ToString();

        item = new ListItem(servise, "1");
        ddl.Items.Add(item);

        item = new ListItem(profession, "2");
        ddl.Items.Add(item);
    }

    #endregion

    #region CheckBox_CheckedChanged

    protected void chkOldDesc_CheckedChanged(object sender, EventArgs e)
    {
        //chk601_606.Checked = false;
        //CheckBox chkOldDesc = sender as CheckBox;
        //if (chkOldDesc != null)
        //{
        //    if (chkOldDesc.Checked == true)
        //    {
        //        txtNewDesc.Text = txtOldDesc.Text;
        //    }
        //    else
        //    {
        //        txtNewDesc.Text = string.Empty;
        //    }
        //}
    }

    protected void chk601_606_CheckedChanged(object sender, EventArgs e)
    {
        //chkOldDesc.Checked = false;
        CheckBox chk601_606 = sender as CheckBox;
        if (chk601_606 != null)
        {
            if (chk601_606.Checked == true)
            {
                txtNewDesc.Text = txtTblDesc.Text;
            }
            else
            {
                txtNewDesc.Text = string.Empty;
            }
        }
    }

    #endregion

    #region Buttons click

    protected void btnSave_Click1(object sender, EventArgs e)
    {
        string code = String.Empty;
        string name = String.Empty;
        string category = String.Empty;
        string parentCode = String.Empty;
        string oldCode = String.Empty;
        string oldCodeNew = String.Empty;
        string oldTable = String.Empty;
        string oldTableNew = String.Empty;
        string sectorCode = String.Empty;
        string showExpert = String.Empty;

        try
        {
            if (Page.IsValid)
            {
                code = txtRetrainingCode.Text;
                name = txtNewDesc.Text;
                category = ddlRetrainingCategory.SelectedItem.Text;

                parentCode = txtParentCode.Text;
                if (parentCode == string.Empty)
                    parentCode = "-1";

                sectorCode = GlobalMethods.GetStringFromList(ddlSectors.SelectedItems);
                if (sectorCode == String.Empty)
                {
                    if (category == GetLocalResourceObject("Profession").ToString())
                        sectorCode = "7";
                }

                if(pnlProficiency.Visible == true && txtProficiencyFemale.Visible == true && txtProficiencyMale.Text != string.Empty)
                    showExpert = txtProficiencyMale.Text;               

                if (code != String.Empty && name != String.Empty)
                {
                    UpdateItem(code, name, category, parentCode,
                                    oldCode, oldCodeNew, oldTable, oldTableNew, sectorCode, showExpert);
                }
                ReturnToBack();
            }
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }


    private void ReturnToBack()
    {
        string url = "~/UpdateTables/UpdateProfessionsNew.aspx?flag=";
        string category = GetViewState("category");

        if (category == GetLocalResourceObject("Profession").ToString())
            url = "~/UpdateTables/UpdateProfessionsNew.aspx?flag=false";
        else
            url = "~/UpdateTables/UpdateProfessionsNew.aspx?flag=true";
        Response.Redirect(url, false);
    }

    protected void btnReturn_Click(object sender, EventArgs e)
    {
        ReturnToBack();
    }

    

    protected void btnDeleteTable_Click(object sender, EventArgs e)
    {
        try
        {
            txtTblCode.Text = String.Empty;
            txtTblDesc.Text = String.Empty;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    protected void btnClear_Click(object sender, EventArgs e)
    {
        try
        {
            chk601_606.Checked = false;
           
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }



    #endregion

    #region DDl_SelectedIndexChanged

    
    private bool IsCategoryChanged()
    {
        try
        {
            if (GetViewState("relation") == String.Empty)
                return true;
            else
                return false;
        }
        catch (Exception)
        {
            throw;
        }
    }

    protected void ddlTableCode_SelectedIndexChanged(object sender, EventArgs e)
    {
        int selectedItem = -1; ;
        if (ddlTableCode.SelectedValue == "601")
            selectedItem = 3;
        if (ddlTableCode.SelectedValue == "606")
            selectedItem = 4;
        if (ddlTableCode.SelectedValue == "All")
            selectedItem = 5;

        txtTblCode.Text = String.Empty;
        txtTblDesc.Text = string.Empty;
        txtRetrainingCode.Text = string.Empty;
    }

    #endregion


    [WebMethod(true)]
    public static void OnChangeText()
    {
    }

    protected void btnParentDelete_Click(object sender, EventArgs e)
    {
        txtParentCode.Text = txtParentDesc.Text = String.Empty;
    }



    protected void btnRelations_Click(object sender, EventArgs e)
    {
        bool result = false;
        try
        {
            //1. - delete relation parent child from DB

            //3.- delete text from txtParent

            string code = GetViewState("code");
            string parentCode = GetViewState("parentCode");
            string category = GetViewState("category");

            if (!String.IsNullOrEmpty(code))
            {
                result = DeleteRelationParentChild(code, category);
                if (result)
                {
                    txtParentCode.Text = txtParentDesc.Text = String.Empty;
                    ViewState["relation"] = null;
                    //this.ddlCategory.Attributes.Remove("onchange");
                    btnRelations.Visible = false;
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private bool DeleteRelationParentChild(string code, string category)
    {
        int result = -1;
        try
        {
            if (category == GetLocalResourceObject("Profession").ToString())
            {
                result = mng.DeleteProfessionsParentChild(code);
            }
            else if (category == GetLocalResourceObject("Service").ToString())
            {
                result = mng.DeleteServiceParentChild(code);
            }
            if (result > 0)
            {
                return true;
            }
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
        return false;
    }
    protected void btnRelations_Click1(object sender, EventArgs e)
    {

    }
    protected void ddlRetrainingCategory_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            if (ddlRetrainingCategory.SelectedItem.Text == GetLocalResourceObject("Profession").ToString() )
            {
                SetProfessionDefault();
            }
            if (ddlRetrainingCategory.SelectedItem.Text == GetLocalResourceObject("Service").ToString())
            {
                //ddlSector.Visible = false;
                lblSector.Visible = false;
                pnlProficiency.Visible = false;
            }

        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private void SetProfessionDefault()
    {
        //ddlSector.Visible = true;
        lblSector.Visible = true;
        
        
        pnlProficiency.Visible = true;
        if (txtProficiencyMale.Text == String.Empty)
        {
            txtProficiencyMale.Text = txtTblDesc.Text;
            txtProficiencyFemale.Text = txtTblDesc.Text;
        }        
    }


    //protected void ddlSector_PreRender(object sender, EventArgs e)
    //{       
    //    if (ddlSector.SelectedItem.Value == "7" || ddlSector.SelectedItem.Value == "1")
    //        pnlProficiency.Visible = true;
    //    else
    //        pnlProficiency.Visible = false ;

    //    if (ViewState["parentCode"] != null)
    //        ddlSector.Enabled = false;

    //}
}
